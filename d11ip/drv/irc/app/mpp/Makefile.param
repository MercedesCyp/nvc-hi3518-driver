# Makefile.param 
# Only global variable should be defined here.
# All the variables must be used as "export" and "?=".
# Otherwise, there will be some errors, when Makefile.param is nested.

# Use this file as the following sample
# ifeq ($(PARAM_FILE), )
#     PARAM_FILE:=../Makefile.param
#     include $(PARAM_FILE)
# endif


#ifeq ($(PARAM_FILE), )
PARAM_FILE:=/hiwork/Hi3518_SDK_V1.0.7.0/mpp/Makefile.param
#     include $(PARAM_FILE)
#endif



# Define the default OS link directory.
export HIWORK_PATH?=/hiwork

export ARCH=arm
export MPP_BUILD=n

# use HIARCH indicate chip, use libc to choose cross compiler.
export HIARCH?=hi3518
export LIBC?=uclibc

# Whether support the debug information. HI_DEBUG or HI_RELEASE
export HIDBG?=HI_DEBUG

# Whether open -g 
#export HIGDB?=y
export HIGDB?=n

# FPGA board or not
export FPGA?=n

ifeq ($(HIARCH), )
$(error HIARCH not defined! Please check!)
endif

ifeq ($(LIBC), )
$(error LIBC not defined! Please check!)
endif

ifeq ($(HIARCH),hi3531)
	export HICHIP?=0x35310100
	export ARCH_DIR?=hi3531
endif

ifeq ($(HIARCH),hi3532)
	export HICHIP?=0x35320100
	export ARCH_DIR?=hi3531
endif

ifeq ($(HIARCH),hi3521)
	export HICHIP?=0x35210100
	export ARCH_DIR?=hi3521
endif

ifeq ($(HIARCH),hi3520A)
	export HICHIP?=0x3520A100
	export ARCH_DIR?=hi3521
endif

ifeq ($(HIARCH),hi3520D)
	export HICHIP?=0x3520D100
	export ARCH_DIR?=hi3520D
endif

ifeq ($(HIARCH),hi3518)
	export HICHIP?=0x35180100
	export ARCH_DIR?=hi3518
endif

# use C01 to indicate uclibc, C02 to  indicate glibc, C00 to indicate FPGA.
ifeq ($(LIBC),glibc)
	export CVER?=.C02
else
	export CVER?=.C01
endif

ifeq ($(FPGA),y)
	export CVER=.C00
	export HI_FPGA:=HI_FPGA
	export EXTDRV:=extdrv/$(HIARCH)_fpga
else
	export HI_FPGA:=HI_XXXX
	export EXTDRV:=extdrv/$(HIARCH)
endif

# Get the local SDK_ROOT path or RELEASE_ROOT path by PARAM_FILE.
# PARAM_FILE is configed at Makefile before include this file
export PARAM_FILE
export SDK_PATH?=/hiwork/Hi3518_SDK_V1.0.7.0
#export SDK_PATH?=$(shell cd $(PWD)/`dirname $(PARAM_FILE)`/..; pwd)
export DRV_ROOT?=$(SDK_PATH)/drv
export MPP_PATH?=$(SDK_PATH)/mpp

# Allocated the linux position
ifneq ($(shell ls $(HIWORK_PATH)/osdrv$(HIARCH)$(CVER)), )
	export LINUX_ROOT?=$(HIWORK_PATH)/osdrv$(HIARCH)$(CVER)/kernel/linux-3.0.y
else
	export LINUX_ROOT?=$(SDK_PATH)/osdrv/kernel/linux-3.0.y
endif

# Define cross compiler
ifeq ($(LIBC),glibc)
	export CROSS_COMPILE?= arm-hisiv200-linux-
	export CROSS?= arm-hisiv200-linux-
else
	export CROSS_COMPILE?= arm-hisiv100nptl-linux-
	export CROSS?= arm-hisiv100nptl-linux-
endif

export CC:=$(CROSS)gcc
export AR:=$(CROSS)ar

export MPP_CFLAGS:= -Wall

ifeq ($(HIGDB), y)
	MPP_CFLAGS += -g
endif

# Define the object output directory
ifeq ($(MPP_BUILD), y)
	REL_DIR=$(SDK_PATH)/mpp/release/$(HIARCH)
	SAMPLE_DIR=$(SDK_PATH)/mpp/sample/$(HIARCH)
else
	REL_DIR=$(MPP_PATH)
	EXTDRV=extdrv
	SAMPLE_DIR=$(MPP_PATH)/sample
endif

export REL_INC := $(REL_DIR)/include
export REL_LIB := $(REL_DIR)/lib
export REL_KO  := $(REL_DIR)/ko

# Define the lib of audio codec
export AUDIO_PATH?=$(MPP_PATH)/component/audio/lib/$(CROSS)
export AUDIO_LIBA := $(REL_LIB)/libVoiceEngine.a \
		$(REL_LIB)/libaec.a	\
		$(REL_LIB)/libresampler.a \
		$(REL_LIB)/libanr.a

# Define the lib of jpeg codec
export JPEGD_PATH?=$(MPP_PATH)/component/jpegd
export JPEGD_LIBA:=$(REL_LIB)/libjpeg.a

#********************* Macro for version management***************************** 
VER_X ?= 1
VER_Y ?= 0
VER_Z ?= 0
VER_P ?= 0
MPP_CFLAGS += -DVER_X=$(VER_X) -DVER_Y=$(VER_Y) -DVER_Z=$(VER_Z) -DVER_P=$(VER_P)
#******************************************************************************* 

# include the config file of platform
ifeq ($(MPP_BUILD), y)
	-include $(SDK_PATH)/mpp/configs/config.mk
else
	export CONFIG_ISP=y
endif

# End!!




################# select sensor type for your sample ####################
#SENSOR_TYPE ?= APTINA_AR0130_DC_720P_30FPS
#SENSOR_TYPE ?= SONY_ICX692_DC_720P_30FPS
#SENSOR_TYPE ?= SONY_IMX104_DC_720P_30FPS
#SENSOR_TYPE ?= SONY_IMX138_DC_720P_30FPS
#SENSOR_TYPE ?= SONY_IMX122_DC_1080P_30FPS
#SENSOR_TYPE ?= APTINA_9M034_DC_720P_30FPS
#SENSOR_TYPE ?= APTINA_MT9P006_DC_1080P_30FPS
SENSOR_TYPE ?= OMNI_OV9712_DC_720P_30FPS
#SENSOR_TYPE ?= OMNI_OV2710_DC_1080P_30FPS
#SENSOR_TYPE ?= SOI_H22_DC_720P_30FPS
#SENSOR_TYPE ?= HIMAX_1375_DC_720P_30FPS

SENSOR_LIBS := $(REL_LIB)/libisp.a

ifeq ($(SENSOR_TYPE), APTINA_AR0130_DC_720P_30FPS)
    SENSOR_LIBS += $(REL_LIB)/libsns_ar0130_720p.a
endif

ifeq ($(SENSOR_TYPE), PANASONIC_MN34031_DC_720P_30FPS)
    SENSOR_LIBS += $(REL_LIB)/libsns_mn34031_720p.a
endif

ifeq ($(SENSOR_TYPE), SONY_ICX692_DC_720P_30FPS)
    SENSOR_LIBS += $(REL_LIB)/libsns_icx692.a
endif

ifeq ($(SENSOR_TYPE), SONY_IMX104_DC_720P_30FPS)
    SENSOR_LIBS += $(REL_LIB)/libsns_imx104.a
endif

ifeq ($(SENSOR_TYPE), SONY_IMX138_DC_720P_30FPS)
    SENSOR_LIBS += $(REL_LIB)/libsns_imx138.a
endif

ifeq ($(SENSOR_TYPE), APTINA_9M034_DC_720P_30FPS)
    SENSOR_LIBS += $(REL_LIB)/libsns_9m034.a
endif

ifeq ($(SENSOR_TYPE), OMNI_OV9712_DC_720P_30FPS)
    SENSOR_LIBS += $(REL_LIB)/libsns_ov9712.a
endif

ifeq ($(SENSOR_TYPE), OMNI_OV2710_DC_1080P_30FPS)
    SENSOR_LIBS += $(REL_LIB)/libsns_ov2710.a
endif

ifeq ($(SENSOR_TYPE), SOI_H22_DC_720P_30FPS)
    SENSOR_LIBS += $(REL_LIB)/libsns_soih22.a
endif

ifeq ($(SENSOR_TYPE), HIMAX_1375_DC_720P_30FPS)
    SENSOR_LIBS += $(REL_LIB)/libsns_himax1375.a
endif

ifeq ($(SENSOR_TYPE), SONY_IMX122_DC_1080P_30FPS)
    SENSOR_LIBS += $(REL_LIB)/libsns_imx122.a
endif

ifeq ($(SENSOR_TYPE), APTINA_MT9P006_DC_1080P_30FPS)
    SENSOR_LIBS += $(REL_LIB)/libsns_mt9p006.a
endif

#########################################################################

#COMMON_DIR:=$(PWD)/../common
COMMON_DIR:=/hiwork/Hi3518_SDK_V1.0.7.0/mpp/sample/common/

INC_FLAGS := -I$(COMMON_DIR)
INC_FLAGS += -I$(REL_INC)
INC_FLAGS += -I$(MPP_PATH)/component/acodec

ifeq ($(MPP_BUILD), y)
INC_FLAGS += -I$(MPP_PATH)/$(EXTDRV)/tw2865
else
	INC_FLAGS += -I$(MPP_PATH)/extdrv/tw2865
endif

ifeq ($(CONFIG_ISP), y)
ISP_VERSION := ISP_V1
else
ISP_VERSION := ISP_V2
SENSOR_LIBS += $(REL_LIB)/lib_hiae.a
SENSOR_LIBS += $(REL_LIB)/lib_hiawb.a
SENSOR_LIBS += $(REL_LIB)/lib_hiaf.a
endif

CFLAGS := -Wall -g $(INC_FLAGS) -D$(HIARCH) -DHICHIP=$(HICHIP) -DSENSOR_TYPE=$(SENSOR_TYPE) -D$(HIDBG) -D$(HI_FPGA) -lpthread -lm -D$(ISP_VERSION)

COMM_SRC := $(wildcard $(COMMON_DIR)/*.c)
COMM_OBJ := $(COMM_SRC:%.c=%.o)

